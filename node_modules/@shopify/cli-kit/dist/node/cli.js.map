{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../src/node/cli.ts"],"names":[],"mappings":"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","sourcesContent":["// CLI\nimport {initializeCliKitStore} from '../store.js'\nimport {initiateLogging} from '../output.js'\nimport {isDebug} from '../environment/local.js'\nimport constants, {bugsnagApiKey} from '../constants.js'\nimport {reportEvent} from '../analytics.js'\nimport {\n  mapper as errorMapper,\n  handler as errorHandler,\n  AbortSilent,\n  shouldReport as shouldReportError,\n} from '../error.js'\nimport {findUpAndReadPackageJson} from '../dependency.js'\nimport {moduleDirectory} from '../path.js'\nimport {run, settings, flush} from '@oclif/core'\nimport Bugsnag from '@bugsnag/js'\n\ninterface RunCLIOptions {\n  /** The value of import.meta.url of the CLI executable module */\n  moduleURL: string\n  /** The logs file name */\n  logFilename: string\n}\n\n/**\n * A function that abstracts away setting up the environment and running\n * a CLI\n * @param module {RunCLIOptions} Options.\n */\nexport async function runCLI(options: RunCLIOptions) {\n  await initializeCliKitStore()\n  initiateLogging({filename: options.logFilename})\n  if (isDebug()) {\n    settings.debug = true\n  } else {\n    Bugsnag.start({\n      apiKey: bugsnagApiKey,\n      logger: null,\n      appVersion: await constants.versions.cliKit(),\n      autoTrackSessions: false,\n    })\n  }\n\n  run(undefined, options.moduleURL)\n    .then(flush)\n    .catch((error: Error): Promise<void | Error> => {\n      if (error instanceof AbortSilent) {\n        process.exit(1)\n      }\n      // eslint-disable-next-line promise/no-nesting\n      return errorMapper(error)\n        .then(reportError)\n        .then((error: Error) => {\n          return errorHandler(error)\n        })\n        .then(() => {\n          process.exit(1)\n        })\n    })\n}\n\n/**\n * A function for create-x CLIs that automatically runs the \"init\" command.\n * @param options\n */\nexport async function runCreateCLI(options: RunCLIOptions) {\n  const packageJson = await findUpAndReadPackageJson(moduleDirectory(options.moduleURL))\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const packageName = (packageJson.content as any).name as string\n  const name = packageName.replace('@shopify/create-', '')\n  const initIndex = process.argv.findIndex((arg) => arg.includes('init'))\n  if (initIndex === -1) {\n    const initIndex =\n      process.argv.findIndex((arg) => arg.match(new RegExp(`bin(\\\\/|\\\\\\\\)+(create-${name}|dev|run)`))) + 1\n    process.argv.splice(initIndex, 0, 'init')\n  }\n  await runCLI(options)\n}\n\nconst reportError = async (errorToReport: Error): Promise<Error> => {\n  await reportEvent({errorMessage: errorToReport.message})\n  if (settings.debug || !shouldReportError(errorToReport)) return errorToReport\n\n  let mappedError: Error\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (Error.prototype.isPrototypeOf(errorToReport)) {\n    mappedError = new Error(errorToReport.message)\n    if (errorToReport.stack) {\n      // For mac/linux, remove `file:///` from stacktrace\n      // For windows, remove `file:///C:/` from stacktrace\n      const regex = '\\\\((.*node_modules.)(@shopify.)?'\n      mappedError.stack = errorToReport.stack.replace(new RegExp(regex, 'g'), '(')\n    }\n  } else if (typeof errorToReport === 'string') {\n    mappedError = new Error(errorToReport)\n  } else {\n    mappedError = new Error('Unknown error')\n  }\n\n  await new Promise((resolve, reject) => {\n    Bugsnag.notify(mappedError, undefined, resolve)\n  })\n  return mappedError\n}\n\nexport default runCLI\n"]}