// CLI
import { initializeCliKitStore } from '../store.js';
import { initiateLogging } from '../output.js';
import { isDebug } from '../environment/local.js';
import constants, { bugsnagApiKey } from '../constants.js';
import { reportEvent } from '../analytics.js';
import { mapper as errorMapper, handler as errorHandler, AbortSilent, shouldReport as shouldReportError, } from '../error.js';
import { findUpAndReadPackageJson } from '../dependency.js';
import { moduleDirectory } from '../path.js';
import { run, settings, flush } from '@oclif/core';
import Bugsnag from '@bugsnag/js';
/**
 * A function that abstracts away setting up the environment and running
 * a CLI
 * @param module {RunCLIOptions} Options.
 */
export async function runCLI(options) {
    await initializeCliKitStore();
    initiateLogging({ filename: options.logFilename });
    if (isDebug()) {
        settings.debug = true;
    }
    else {
        Bugsnag.start({
            apiKey: bugsnagApiKey,
            logger: null,
            appVersion: await constants.versions.cliKit(),
            autoTrackSessions: false,
        });
    }
    run(undefined, options.moduleURL)
        .then(flush)
        .catch((error) => {
        if (error instanceof AbortSilent) {
            process.exit(1);
        }
        // eslint-disable-next-line promise/no-nesting
        return errorMapper(error)
            .then(reportError)
            .then((error) => {
            return errorHandler(error);
        })
            .then(() => {
            process.exit(1);
        });
    });
}
/**
 * A function for create-x CLIs that automatically runs the "init" command.
 * @param options
 */
export async function runCreateCLI(options) {
    const packageJson = await findUpAndReadPackageJson(moduleDirectory(options.moduleURL));
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const packageName = packageJson.content.name;
    const name = packageName.replace('@shopify/create-', '');
    const initIndex = process.argv.findIndex((arg) => arg.includes('init'));
    if (initIndex === -1) {
        const initIndex = process.argv.findIndex((arg) => arg.match(new RegExp(`bin(\\/|\\\\)+(create-${name}|dev|run)`))) + 1;
        process.argv.splice(initIndex, 0, 'init');
    }
    await runCLI(options);
}
const reportError = async (errorToReport) => {
    await reportEvent({ errorMessage: errorToReport.message });
    if (settings.debug || !shouldReportError(errorToReport))
        return errorToReport;
    let mappedError;
    // eslint-disable-next-line no-prototype-builtins
    if (Error.prototype.isPrototypeOf(errorToReport)) {
        mappedError = new Error(errorToReport.message);
        if (errorToReport.stack) {
            // For mac/linux, remove `file:///` from stacktrace
            // For windows, remove `file:///C:/` from stacktrace
            const regex = '\\((.*node_modules.)(@shopify.)?';
            mappedError.stack = errorToReport.stack.replace(new RegExp(regex, 'g'), '(');
        }
    }
    else if (typeof errorToReport === 'string') {
        mappedError = new Error(errorToReport);
    }
    else {
        mappedError = new Error('Unknown error');
    }
    await new Promise((resolve, reject) => {
        Bugsnag.notify(mappedError, undefined, resolve);
    });
    return mappedError;
};
export default runCLI;
//# sourceMappingURL=cli.js.map