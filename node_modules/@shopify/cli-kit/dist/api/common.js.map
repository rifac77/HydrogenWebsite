{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/api/common.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAC,MAAM,yBAAyB,CAAA;AACjD,OAAO,SAAS,MAAM,iBAAiB,CAAA;AACvC,OAAO,EAAC,UAAU,EAAC,MAAM,QAAQ,CAAA;AAEjC,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,KAAa;IAC9C,MAAM,SAAS,GAAG,kBAAkB,MAAM,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAA;IACvE,MAAM,UAAU,GAAG,MAAM,SAAS,EAAE,CAAA;IAEpC,MAAM,OAAO,GAAG;QACd,yDAAyD;QACzD,YAAY,EAAE,SAAS;QACvB,0DAA0D;QAC1D,oBAAoB,EAAE,OAAO,CAAC,QAAQ;QACtC,cAAc,EAAE,UAAU,EAAE;QAC5B,aAAa,EAAE,UAAU,KAAK,EAAE;QAChC,wBAAwB,EAAE,UAAU,KAAK,EAAE;QAC3C,cAAc,EAAE,kBAAkB;QAClC,sDAAsD;QACtD,wDAAwD;KACzD,CAAA;IAED,OAAO,OAAO,CAAA;AAChB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CAAC,OAAgC;IACrE,MAAM,SAAS,GAA4B,EAAE,CAAA;IAC7C,MAAM,QAAQ,GAAG,CAAC,OAAO,EAAE,eAAe,CAAC,CAAA;IAC3C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;QACtC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,SAAS,EAAE;YAC1F,SAAS,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;SACpC;IACH,CAAC,CAAC,CAAA;IACF,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;SAC1B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;QACd,OAAO,MAAM,MAAM,KAAK,SAAS,CAAC,MAAM,CAAC,EAAE,CAAA;IAC7C,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,CAAC,CAAA;AACf,CAAC","sourcesContent":["import {isShopify} from '../environment/local.js'\nimport constants from '../constants.js'\nimport {randomUUID} from 'crypto'\n\nexport async function buildHeaders(token: string): Promise<{[key: string]: string}> {\n  const userAgent = `Shopify CLI; v=${await constants.versions.cliKit()}`\n  const isEmployee = await isShopify()\n\n  const headers = {\n    /* eslint-disable @typescript-eslint/naming-convention */\n    'User-Agent': userAgent,\n    // 'Sec-CH-UA': secCHUA, This header requires the Git sha.\n    'Sec-CH-UA-PLATFORM': process.platform,\n    'X-Request-Id': randomUUID(),\n    authorization: `Bearer ${token}`,\n    'X-Shopify-Access-Token': `Bearer ${token}`,\n    'Content-Type': 'application/json',\n    // ...(isEmployee && {'X-Shopify-Cli-Employee': '1'}),\n    /* eslint-enable @typescript-eslint/naming-convention */\n  }\n\n  return headers\n}\n\n/**\n * Remvoes the sensitive data from the headers and outputs them as a string.\n * @param headers {{[key: string]: string}} HTTP headers.\n * @returns {string} A sanitized version of the headers as a string.\n */\nexport function sanitizedHeadersOutput(headers: {[key: string]: string}): string {\n  const sanitized: {[key: string]: string} = {}\n  const keywords = ['token', 'authorization']\n  Object.keys(headers).forEach((header) => {\n    if (keywords.find((keyword) => header.toLocaleLowerCase().includes(keyword)) === undefined) {\n      sanitized[header] = headers[header]\n    }\n  })\n  return Object.keys(sanitized)\n    .map((header) => {\n      return ` - ${header}: ${sanitized[header]}`\n    })\n    .join('\\n')\n}\n"]}