import { Listr as OriginalListr, ListrTask } from 'listr2';
export declare function newListr(tasks: ListrTask[], options?: object): OriginalListr<any, any, "verbose">;
export declare type ListrTasks = ConstructorParameters<typeof OriginalListr>[0];
export type { ListrTaskWrapper, ListrDefaultRenderer, ListrTask } from 'listr2';
interface BaseQuestion<TName extends string> {
    name: TName;
    message: string;
    preface?: string;
    validate?: (value: string) => string | true;
    default?: string;
    result?: (value: string) => string | boolean;
}
export declare type InputQuestion<TName extends string> = BaseQuestion<TName> & {
    type: 'input';
};
export declare type SelectQuestion<TName extends string> = BaseQuestion<TName> & {
    type: 'select';
    choices: string[] | {
        name: string;
        value: string;
    }[];
};
export declare type AutocompleteQuestion<TName extends string> = BaseQuestion<TName> & {
    type: 'autocomplete';
    choices: string[] | {
        name: string;
        value: string;
    }[];
};
export declare type PasswordQuestion<TName extends string> = BaseQuestion<TName> & {
    type: 'password';
};
export declare type Question<TName extends string = string> = InputQuestion<TName> | SelectQuestion<TName> | AutocompleteQuestion<TName> | PasswordQuestion<TName>;
export declare const prompt: <TName extends string & keyof TAnswers, TAnswers extends { [key in TName]: string; } = { [key_1 in TName]: string; }>(questions: readonly Question<TName>[], debugForceInquirer?: boolean) => Promise<TAnswers>;
export declare function nonEmptyDirectoryPrompt(directory: string): Promise<void>;
export declare const keypress: () => Promise<void>;
